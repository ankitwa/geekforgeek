package algorithm.backtracking;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;

public class PartitionOfKSubsumOfEqualSum {
	
	int[] array;
	boolean[] visited;
	ArrayDeque<List<Integer>> subsetOfSubsets= new ArrayDeque<>();
	int partition;
	
	int SumK = -1;
	
	public PartitionOfKSubsumOfEqualSum(int[] array){
		this.array = array;
		partition = array.length / 2;
	}
	
	public int[] getIndexOfElementEqualToSum(int partition){
		int[] result=new int[partition];
		int count=0;
		int sum=0;
		for(int i=0; i < array.length ; i++){
			if(visited[i] == false && count < partition){
				result[count] = i;
				sum += result[count];
				count++;
			}
		}
		if(count == partition){
			if(SumK == -1){
				this.SumK = sum; 
			}
			System.out.println("Found Element Equals to =" + SumK + " is i=" + result[0] + " , " + result[1]);
			return result;
		}
		return null;
	}
	
	
	public boolean foundSubSet(int count){
		boolean success=false;
		if(count == array.length){
			success = true;
		}else{
			int[] partition = getIndexOfElementEqualToSum(this.partition);
			if(partition != null){
				ArrayList<Integer> subSet = new ArrayList<>();
				for(int i=0; i < partition.length ; i++){
					subSet.add(array[i]);
					visited[i] = true;
				}
				subsetOfSubsets.add(subSet);
				if(foundSubSet(count + partition.length)){
					success = true;
					return success;
				}
				
				for(int i=0; i < partition.length ; i++){
					visited[i] = false;
				}
				subsetOfSubsets.remove();
			}
		}
		return success;
	}
	
	
	
	

}
