package algorithm.backtracking;

import java.util.ArrayList;
import java.util.List;

class PositionKP{
	
	int x;
	int y;
	
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	@Override
	public String toString() {
		return "PositionKP [x=" + x + ", y=" + y + "]";
	}
}

public class KnightTourProblem {

	int[][] matrix;
	
	int size;
	
	List<PositionKP> visitedPositions=new ArrayList<>();
	
	public KnightTourProblem(int size) {
		this.matrix=new int[size][size];
		this.size = size;
	}
	
	
	public boolean isValidPosition(PositionKP positionKP){
		if(matrix[positionKP.getX()][positionKP.getY()] != -1
				&& (positionKP.getX() >= 0 && positionKP.getY() >= 0) 
				&& (positionKP.getX() < size && positionKP.getY() < size)){
			return true;
		}
		return false;
	}
	
	
	public List<PositionKP> getAvailblePositionForMove(PositionKP position){
		if(matrix[position.getX()][position.getY()] != -1 && ){
			
		}
		
	}
	
		
	
	

}
